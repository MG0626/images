name: Build images

on:
  workflow_dispatch:

jobs:
  build-plasma-image:
    runs-on: ubuntu-24.04-arm
    
    permissions:
      contents: write

    steps:
      - name: Update apt cache
        run: |
          sudo apt-get update

      - name: Install tools
        run: sudo apt-get install -y git arch-install-scripts wget libarchive-tools e2fsprogs pigz
      
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Create and mount image
        run: |
          echo "::group::Create image"
          truncate -s 20G ./rootfs.img
          mkfs.ext4 ./rootfs.img
          echo "::endgroup::"
          echo "::group::Mount image"
          mkdir mountpoint
          sudo mount -o loop ./rootfs.img ./mountpoint/
          sudo mount -o size=512M,mode=0755 -t tmpfs none ./mountpoint/boot/efi --mkdir
          echo "::endgroup::"

      - name: Download generic rootfs tarball
        run: |
          wget "http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz" -O ArchLinuxARM-aarch64-latest.tar.gz

      - name: Extract generic rootfs
        shell: bash
        run: |
          sudo -i bash <<'EOF'
          cd /home/runner/work/images/images/
          bsdtar -xpf ArchLinuxARM-aarch64-latest.tar.gz -C mountpoint
          EOF

      - name: Prepare system
        shell: bash
        run: |
          sudo arch-chroot ./mountpoint bash - <<'EOF'

          echo "::group::Init pacman key store"
          pacman-key --init
          pacman-key --populate archlinuxarm
          echo "::endgroup::"

          echo "::group::Delete default user"
          userdel alarm
          echo "::endgroup::"

          echo "::group::Set locale"
          sed -i "s|#en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" "/etc/locale.gen"
          locale-gen
          echo "LANG=en_US.UTF-8" > "/etc/locale.conf"
          echo "::endgroup::"
          
          echo "::group::Enable parallel downloads"
          sed -i "s/#ParallelDownloads/ParallelDownloads/g" /etc/pacman.conf
          echo "::endgroup::"
          
          echo "::group::Add nabu-alarm repo"
          pacman-key --recv-key 666411233117519B --keyserver keyserver.ubuntu.com
          pacman-key --lsign-key 666411233117519B
          echo "[nabu-alarm]" >> /etc/pacman.conf
          echo "SigLevel = Required DatabaseOptional" >> /etc/pacman.conf
          echo "Server = https://nabu-alarm.github.io/repo" >> /etc/pacman.conf
          pacman -Sy --noconfirm nabu-alarm-keyring
          pacman-key --populate
          echo "::endgroup::"
           
          echo "::group::Remove generic kernel"
          pacman -R --noconfirm linux-aarch64
          echo "::endgroup::"
          
          echo "::group::Update system"
          pacman -Syu --noconfirm
          echo "::endgroup::"

          echo "::group::Install firmwares"
          pacman -S --noconfirm linux-firmware-xiaomi-nabu
          echo "::endgroup::"
          
          echo "::group::Install kernel and headers"
          pacman -S --noconfirm linux-nabu linux-nabu-headers
          echo "::endgroup::"

          echo "::group::Install alsa ucm config"
          pacman -S --noconfirm alsa-ucm-conf-xiaomi-nabu
          echo "::endgroup::"

          echo "::group::Install qualcomm wlan services"
          pacman -S --noconfirm tqftpserv rmtfs
          systemctl enable tqftpserv rmtfs
          echo "::endgroup::"

          echo "::group::Disable sshd"
          systemctl disable sshd
          echo "::endgroup::"

          echo "::group::Install and configure sudo"
          pacman -S --noconfirm sudo
          echo "%wheel ALL=(ALL:ALL) ALL" > /etc/sudoers.d/10-wheel
          echo "::endgroup::"

          EOF

      - name: Apply overlay
        run: |
          sudo cp ./main/plasma/overlay/* -rv ./mountpoint/

      - name: Configure system
        shell: bash
        run: |
          sudo arch-chroot ./mountpoint bash - <<'EOF'
          
          echo "::group::Create efi"
          cp /opt/nabu/efi-template/* -r /boot/efi/
          rm /opt/nabu/efi-template -r
          echo "::endgroup::"

          echo "::group::Install plymouth"
          pacman -S --noconfirm plymouth
          echo "::endgroup::"

          echo "::group::Configure mkinitcpio"
          sed -i "s|HOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block filesystems fsck)|HOOKS=(base udev plymouth autodetect modconf kms keyboard keymap consolefont block filesystems fsck)|g" /etc/mkinitcpio.conf
          echo "::endgroup::"

          echo "::group::Generate UKI"
          mkinitcpio -P
          echo "::endgroup::"

          echo "::group::Pack efi"
          tar czf "/opt/nabu/efi.tgz" -C "/boot/efi/" .
          echo "::endgroup::"

          echo "::group::Install DE"
          pacman -S --noconfirm plasma networkmanager pipewire pipewire-pulse pipewire-jack noto-fonts maliit-keyboard gwenview konsole dolphin firefox bluez bluez-utils vulkan-freedreno qt6-multimedia-gstreamer zram-generator
          echo "::endgroup::"

          echo "::group::Enable services"
          systemctl enable sddm bluetooth NetworkManager systemd-zram-setup@zram0.service
          echo "::endgroup::"

          EOF

      - name: Unmount rootfs image
        run: |
          sudo umount -R ./mountpoint
          rmdir ./mountpoint

      - name: Shrink down rootfs image
        run: |
          e2fsck -f rootfs.img -y
          resize2fs rootfs.img -M

      - name: Compress rootfs image
        run: |
          pigz -9 rootfs.img

      - name: Generate release name
        run: |
          echo "CURRENT_DATE=$(date +'%d-%m-%Y')" >> $GITHUB_ENV
      
      - name: Release rootfs
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.CURRENT_DATE }}-plasma
          target_commitish: ${{ github.sha }}
          name: Arch Linux ARM (Plasma) ${{ env.CURRENT_DATE }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./rootfs.img.xz
