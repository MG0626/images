name: Build images

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:
  build-plasma-image:
    runs-on: ubuntu-24.04-arm
    
    permissions:
      contents: write

    steps:
      - name: Update apt cache
        run: |
          sudo apt-get update

      - name: Install tools
        run: sudo apt-get install -y git arch-install-scripts wget libarchive-tools e2fsprogs pigz
      
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          path: main

      - name: Create and mount image
        run: |
          echo "::group::Create image"
          truncate -s 20G ./rootfs.img
          mkfs.ext4 ./rootfs.img
          echo "::endgroup::"
          echo "::group::Mount image"
          mkdir mountpoint
          sudo mount -o loop ./rootfs.img ./mountpoint/
          sudo mkdir ./mountpoint/boot/efi/ -p
          sudo mount -o size=512M,mode=0755 -t tmpfs none ./mountpoint/boot/efi/
          echo "::endgroup::"

      - name: Download generic rootfs tarball
        run: |
          wget "http://os.archlinuxarm.org/os/ArchLinuxARM-aarch64-latest.tar.gz" -qO ArchLinuxARM-aarch64-latest.tar.gz

      - name: Extract generic rootfs
        shell: bash
        run: |
          sudo -i bash <<'EOF'
          cd /home/runner/work/images/images/ || exit 1
          bsdtar -xpf ArchLinuxARM-aarch64-latest.tar.gz -C mountpoint || exit 1
          EOF

      - name: Prepare system
        shell: bash
        run: |
          sudo arch-chroot ./mountpoint bash - <<'EOF'

          echo "::group::Init pacman key store"
          pacman-key --init || exit 1
          pacman-key --populate archlinuxarm || exit 1
          echo "::endgroup::"

          echo "::group::Delete default user"
          userdel alarm || exit 1
          echo "::endgroup::"

          echo "::group::Set locale"
          sed -i "s|#en_US.UTF-8 UTF-8|en_US.UTF-8 UTF-8|g" "/etc/locale.gen" || exit 1
          locale-gen || exit 1
          echo "LANG=en_US.UTF-8" > "/etc/locale.conf" || exit 1
          echo "::endgroup::"
          
          echo "::group::Enable parallel downloads"
          sed -i "s/#ParallelDownloads/ParallelDownloads/g" /etc/pacman.conf || exit 1
          echo "::endgroup::"
          
          echo "::group::Add nabu-alarm repo"
          pacman-key --recv-key 666411233117519B --keyserver keyserver.ubuntu.com || exit 1
          pacman-key --lsign-key 666411233117519B || exit 1
          echo "[nabu-alarm]" >> /etc/pacman.conf || exit 1
          echo "SigLevel = Required DatabaseOptional" >> /etc/pacman.conf || exit 1
          echo "Server = https://nabu-alarm.github.io/repo" >> /etc/pacman.conf || exit 1
          pacman -Sy --noconfirm nabu-alarm-keyring || exit 1
          pacman-key --populate || exit 1
          echo "::endgroup::"
           
          echo "::group::Remove generic kernel"
          pacman -R --noconfirm linux-aarch64 || exit 1
          echo "::endgroup::"
          
          echo "::group::Update system"
          pacman -Syu --noconfirm || exit 1
          echo "::endgroup::"

          echo "::group::Install firmwares"
          pacman -S --noconfirm linux-firmware-xiaomi-nabu || exit 1
          echo "::endgroup::"
          
          echo "::group::Install kernel and headers"
          pacman -S --noconfirm linux-nabu linux-nabu-headers || exit 1
          echo "::endgroup::"

          echo "::group::Install alsa ucm config"
          pacman -S --noconfirm alsa-ucm-conf-xiaomi-nabu || exit 1
          echo "::endgroup::"

          echo "::group::Install qualcomm wlan services"
          pacman -S --noconfirm tqftpserv rmtfs || exit 1
          systemctl enable tqftpserv rmtfs || exit 1
          echo "::endgroup::"

          echo "::group::Disable sshd"
          systemctl disable sshd || exit 1
          echo "::endgroup::"

          echo "::group::Install and configure sudo"
          pacman -S --noconfirm sudo || exit 1
          echo "%wheel ALL=(ALL:ALL) ALL" > /etc/sudoers.d/10-wheel
          echo "::endgroup::"

          EOF

      - name: Apply overlay
        run: |
          sudo cp ./main/plasma/overlay/* -r ./mountpoint/

      - name: Configure system
        shell: bash
        run: |
          sudo arch-chroot ./mountpoint bash - <<'EOF'
          
          echo "::group::Create efi"
          cp /opt/nabu/efi-template/* -rv /boot/efi/ || exit 1
          mkdir /boot/efi/EFI/arch/ || exit 1
          rm /opt/nabu/efi-template -r || exit 1
          echo "::endgroup::"

          echo "::group::Install plymouth"
          pacman -S --noconfirm plymouth || exit 1
          echo "::endgroup::"

          echo "::group::Configure mkinitcpio"
          sed -i "s|HOOKS=(base udev autodetect microcode modconf kms keyboard keymap consolefont block filesystems fsck)|HOOKS=(base udev plymouth autodetect modconf kms keyboard keymap consolefont block filesystems fsck)|g" /etc/mkinitcpio.conf || exit 1
          echo "::endgroup::"

          echo "::group::Generate UKI"
          mkinitcpio -P || exit 1
          echo "::endgroup::"

          echo "::group::Pack efi"
          tar cvzf "/opt/nabu/efi.tgz" -C "/boot/efi/" . || exit 1
          echo "::endgroup::"

          echo "::group::Install DE"
          pacman -S --noconfirm plasma networkmanager pipewire pipewire-pulse pipewire-jack noto-fonts maliit-keyboard gwenview konsole dolphin firefox bluez bluez-utils vulkan-freedreno qt6-multimedia-gstreamer zram-generator || exit 1
          echo "::endgroup::"

          echo "::group::Enable services"
          systemctl enable sddm bluetooth NetworkManager systemd-zram-setup@zram0.service || exit 1
          echo "::endgroup::"

          EOF

      - name: Unmount rootfs image
        run: |
          sudo umount -R ./mountpoint
          rmdir ./mountpoint

      - name: Compress rootfs image
        run: |
          e2fsck -f rootfs.img -y
          resize2fs rootfs.img -M
          pigz -9 rootfs.img

      - name: Generate artifact name
        run: |
          echo "ARTIFACT_NAME=plasma-rootfs-$(date +'%d-%m-%Y')" >> $GITHUB_ENV
          echo "DATE=$(date +'%d.%m.%Y')" >> $GITHUB_ENV

      - name: Upload rootfs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./rootfs.img.gz
          retention-days: 90
    
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ env.ARTIFACT_NAME }}
          target_commitish: ${{ github.sha }}
          name: Arch Linux ARM rootfs ${{ env.DATE }}
          draft: false
          prerelease: false
          body: |
            You can download the rootfs image from the artifacts section of the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
